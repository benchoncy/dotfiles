#!/usr/bin/env python3
# Inspired by tmux-sessionizer/tmux-windowizer
# Manages local git repos and git worktrees

import fire
import os

# Environment variables
PROJECTS_SUFFIX = os.environ.get("GAF__PROJECTS_SUFFIX", ".tree")
PROJECTS_PATH = os.environ.get("GAF__PROJECTS_PATH", os.path.expanduser("~/Projects"))
BARE_FOLDER = os.environ.get("GAF__BARE_PATH", "bare.git")


class GitAfforester:
    """
    Git Afforester is a tool for managing local git repos and git worktrees.

    Environment variables:
        GAF__PROJECTS_SUFFIX: The suffix indicating a git repo is managed by
            Git Afforester. Defaults to '.tree'.
        GAF__PROJECTS_PATH: The path to the folder containing the git repos.
        GAF__BARE_PATH: The path to the bare folder inside the git repos.
    """

    def __init__(self, project=None):
        self.project = Project(project)
        self.worktree = Worktree(project=self.project)

    def plant(self, repo_uri):
        """
        Clones a git repo to the project folder and creates a worktree for the
        default branch.
        """

        self.project.uri = repo_uri
        # Checkout the repo as a bare repo
        os.system(f"git clone --bare {repo_uri} {self.project.full_path}/{BARE_FOLDER}")

        # Create a worktree with the default branch name
        os.chdir(f"{self.project.full_path}/{BARE_FOLDER}")
        default_branch_name = os.popen("git branch --show-current").read().strip()
        self.worktree.add(default_branch_name)

    def uproot(self):
        """
        Deletes a git repo and all of its worktrees.
        """
        os.system(f"rm -rf {self.project.full_path}")


class Worktree:
    """
    Manages git worktrees.
    """

    def __init__(self, project):
        self.project = project

    def add(self, branch, pull=True):
        """
        Creates a worktree for the given branch name.
        """
        branch_path = f"{self.project.full_path}/{branch}"
        # Create the worktree if it doesn't exist
        if not os.path.isdir(branch_path):
            os.chdir(f"{self.project.full_path}/{BARE_FOLDER}")
            os.system(f"git worktree add ../{branch} &> /dev/null")
            if pull:
                os.chdir(branch_path)
                os.system("git pull &> /dev/null")

        # Output the path to the worktree
        print(branch_path)

    def remove(self, branch):
        """
        Removes a worktree for the given branch name.
        """
        if os.path.isdir(f"{self.project.full_path}/{branch}"):
            os.chdir(f"{self.project.full_path}/{BARE_FOLDER}")
            os.system(f"git worktree remove ../{branch} &> /dev/null")


class Project:
    def __init__(self, path):
        self.domain = None
        self.owner = None
        self.repo = None
        self.local_path = None
        if path:
            self.path = path

    @property
    def path(self):
        return self._path

    @path.setter
    def path(self, value):
        value = os.path.abspath(value)
        self._path = value
        self.domain, self.owner, self.repo = self._decompose_path(value)
        self.local_path = self._create_local_path()

    @property
    def uri(self):
        return self._uri

    @uri.setter
    def uri(self, value):
        if not value.endswith(".git"):
            raise Exception("Invalid git repo url:", value)
        self._uri = value
        self.domain, self.owner, self.repo = self._decompose_uri(value)
        self.local_path = self._create_local_path()

    def _create_local_path(self):
        return f"{self.domain}/{self.owner}/{self.repo}{PROJECTS_SUFFIX}"

    @property
    def full_path(self):
        project_path = os.path.abspath(PROJECTS_PATH)
        return f"{project_path}/{self.local_path}"

    def _decompose_path(self, path):
        path = path.replace(f"{os.path.abspath(PROJECTS_PATH)}/", "")
        domain, owner, repo = path.split("/")
        repo = repo.replace(PROJECTS_SUFFIX, "")
        return domain, owner, repo

    def _decompose_uri(self, uri):
        domain, owner, repo = uri.replace(":", "/").split("/")
        repo = repo.replace(".git", "")
        domain = domain.replace("https://", "").replace("git@", "")
        return domain, owner, repo


if __name__ == "__main__":
    fire.Fire(GitAfforester)
