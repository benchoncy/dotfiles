#!/usr/bin/env python3
# Inspired by tmux-sessionizer/tmux-windowizer
# Manages local git repos and git worktrees

import fire
import os

# Environment variables
PROJECTS_SUFFIX = os.environ.get("GAF__PROJECTS_SUFFIX", ".tree")
PROJECTS_PATH = os.environ.get("GAF__PROJECTS_PATH", os.path.expanduser("~/projects"))
BARE_FOLDER = os.environ.get("GAF__BARE_PATH", "bare.git")
PROTECTED_BRANCHES = os.environ.get("GAF__PROTECTED_BRANCHES", "main,master").split(",")


class GitAfforester:
    """
    Git Afforester is a tool for managing local git repos and git worktrees.

    Environment variables:
        GAF__PROJECTS_SUFFIX: The suffix indicating a git repo is managed by
            Git Afforester. Defaults to '.tree'.
        GAF__PROJECTS_PATH: The path to the folder containing the git repos.
        GAF__BARE_PATH: The path to the bare folder inside the git repos.
    """

    def __init__(self):
        self.worktree = Worktree()

    def plant(self, repo_url):
        """
        Clones a git repo to the project folder and creates a worktree for the
        default branch.
        """

        # Check if the repo url is valid
        if not repo_url.endswith(".git"):
            print("Invalid git repo url:", repo_url)
            return

        owner, repo_name = repo_url.replace(":", "/").split("/")[-2:]
        local_repo_name = f"{owner}-{repo_name}".replace("_", "-").replace(
            ".git", PROJECTS_SUFFIX
        )

        # Checkout the repo as a bare repo
        os.chdir(PROJECTS_PATH)
        os.system(f"git clone --bare {repo_url} {local_repo_name}/{BARE_FOLDER}")

        # Create a worktree with the default branch name
        os.chdir(f"{PROJECTS_PATH}/{local_repo_name}/{BARE_FOLDER}")
        default_branch_name = os.popen("git branch --show-current").read().strip()
        self.worktree.add(local_repo_name, default_branch_name)

    def uproot(self, project_name):
        """
        Deletes a git repo and all of its worktrees.
        """
        os.system(f"rm -rf {PROJECTS_PATH}/{project_name}{PROJECTS_SUFFIX}")


class Worktree:
    """
    Manages git worktrees.
    """

    def __validate_project_name(self, project_name):
        """
        Validates the given project name.
        """
        if not project_name.endswith(PROJECTS_SUFFIX):
            raise Exception(
                f"Invalid project name: {project_name}. "
                f"Project name must end with {PROJECTS_SUFFIX}."
            )

    def add(self, project_name, branch_name, pull=True):
        """
        Creates a worktree for the given branch name.
        """
        self.__validate_project_name(project_name)

        repo_path = f"{PROJECTS_PATH}/{project_name}"
        branch_path = f"{repo_path}/{branch_name}"
        # Create the worktree if it doesn't exist
        if not os.path.isdir(branch_path):
            os.chdir(f"{repo_path}/{BARE_FOLDER}")
            os.system(f"git worktree add ../{branch_name} &> /dev/null")
            if pull:
                os.chdir(branch_path)
                os.system("git pull &> /dev/null")

        # Output the path to the worktree
        print(branch_path)

    def remove(self, project_name, branch_name):
        """
        Removes a worktree for the given branch name.
        """
        self.__validate_project_name(project_name)

        repo_path = f"{PROJECTS_PATH}/{project_name}{PROJECTS_SUFFIX}"
        os.chdir(f"{repo_path}/{BARE_FOLDER}")
        os.system(f"git worktree remove ../{branch_name} &> /dev/null")

    def prune(self, age=30):
        """
        Removes all worktrees that have been deleted from the repo or are older
        than the given age in days.
        """
        for project_name in get_projects():
            repo_path = f"{PROJECTS_PATH}/{project_name}{PROJECTS_SUFFIX}"
            # Remove worktrees that have been deleted from the repo
            os.chdir(f"{repo_path}/{BARE_FOLDER}")
            os.system("git worktree prune &> /dev/null")
            # Remove worktrees older than the given age
            os.chdir(repo_path)
            # Get list of worktrees older than the given age
            worktrees = (
                os.popen(f"find . -maxdepth 1 -type d -mtime +{age}").read().split()
            )
            # Remove the worktrees
            for worktree in worktrees:
                basename = os.path.basename(worktree)
                # Skip the bare folder and master/main branch
                if basename == BARE_FOLDER or basename in PROTECTED_BRANCHES:
                    continue
                os.system(f"rm -rf {worktree}")


def get_projects():
    """
    Returns a list of all projects managed by Git Afforester.
    """
    projects = []
    for project_name in os.listdir(PROJECTS_PATH):
        if project_name.endswith(PROJECTS_SUFFIX):
            projects.append(project_name.replace(PROJECTS_SUFFIX, ""))
    return projects


if __name__ == "__main__":
    fire.Fire(GitAfforester)
