#!/usr/bin/env python3
# Git Afforester
# Inspired by tmux-sessionizer/tmux-windowizer for tmux, Git Afforester aims
# to provide a simple and opinionated way to manage git based projects.

import os
import argparse

# Environment variables
PROJECTS_PATH = os.environ.get("GAF__PROJECTS_PATH", os.path.expanduser("~/Projects"))
PROJECTS_SUFFIX = os.environ.get("GAF__PROJECTS_SUFFIX", ".tree")
BARE_FOLDER = os.environ.get("GAF__BARE_FOLDER", "bare.git")
PROTECTED_BRANCHES = os.environ.get("GAF__PROTECTED_BRANCHES", "master,main").split(",")


def plant(repo_uri):
    """
    Adds a new project to the forest.
    """

    project = Project()
    project.uri = repo_uri
    # Checkout the repo as a bare repo
    os.system(f"git clone --bare {repo_uri} {project.full_path}/{BARE_FOLDER}")


def clean(age="30d"):
    """
    Cleans up old worktrees.
    """


def iter_projects():
    for root, _, __ in os.walk(PROJECTS_PATH):
        if root.endswith(PROJECTS_SUFFIX):
            yield root


def get_worktrees():
    worktrees = []
    for project in iter_projects():
        worktrees = os.listdir(project)
        for protected_dir in PROTECTED_BRANCHES + [BARE_FOLDER]:
            if protected_dir in worktrees:
                worktrees.remove(protected_dir)

    return worktrees


class Worktree:
    """
    Manages project git worktrees.
    """

    def __init__(self, project):
        self.project = Project(project)

    def add(self, branch, pull=True):
        """
        Creates a worktree for the given branch name.
        """
        branch_path = f"{self.project.full_path}/{branch}"
        # Create the worktree if it doesn't exist
        if not os.path.isdir(branch_path):
            os.system(
                f"cd {self.project.full_path}/{BARE_FOLDER} && git worktree add ../{branch} &> /dev/null"
            )
            if pull:
                os.system(f"cd {branch_path} && git pull &> /dev/null")

        # Output the path to the worktree
        print(branch_path)

    def remove(self, branch):
        """
        Removes a worktree for the given branch name.
        """
        if os.path.isdir(f"{self.project.full_path}/{branch}"):
            os.system(
                f"cd {self.project.full_path}/{BARE_FOLDER} && git worktree remove ../{branch} &> /dev/null"
            )


class Project:
    def __init__(self, path=None):
        self.domain = None
        self.owner = None
        self.repo = None
        self.local_path = None
        self._uri = None
        if path:
            self.path = path

    @property
    def path(self):
        return self._path

    @path.setter
    def path(self, value):
        value = os.path.abspath(value)
        self._path = value
        self.domain, self.owner, self.repo = self._decompose_path(value)
        self.local_path = self._create_local_path()

    @property
    def uri(self):
        return self._uri

    @uri.setter
    def uri(self, value):
        if not value.endswith(".git"):
            raise Exception("Invalid git repo url:", value)
        self._uri = value
        self.domain, self.owner, self.repo = self._decompose_uri(value)
        self.local_path = self._create_local_path()

    def _create_local_path(self):
        return f"{self.domain}/{self.owner}/{self.repo}{PROJECTS_SUFFIX}"

    @property
    def full_path(self):
        project_path = os.path.abspath(PROJECTS_PATH)
        return f"{project_path}/{self.local_path}"

    def _decompose_path(self, path):
        path = path.replace(f"{os.path.abspath(PROJECTS_PATH)}/", "")
        domain, owner, repo = path.split("/")
        repo = repo.replace(PROJECTS_SUFFIX, "")
        return domain, owner, repo

    def _decompose_uri(self, uri):
        domain, owner, repo = uri.replace(":", "/").split("/")
        repo = repo.replace(".git", "")
        domain = domain.replace("https://", "").replace("git@", "")
        return domain, owner, repo


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest="command")

    plant_parser = subparsers.add_parser("plant")
    plant_parser.add_argument("repo_uri", help="The git repo uri to plant.")

    worktree_parser = subparsers.add_parser("worktree")
    worktree_parser.add_argument(
        "action", help="The action to perform.", choices=["add", "remove"]
    )
    worktree_parser.add_argument("branch", help="The branch to manage.")
    worktree_parser.add_argument("-p", "--project", help="The project to manage.")

    args = parser.parse_args()

    if args.command == "plant":
        plant(args.repo_uri)
    elif args.command == "worktree":
        worktree = Worktree(args.project)
        if args.action == "add":
            worktree.add(args.branch)
        elif args.action == "remove":
            worktree.remove(args.branch)


if __name__ == "__main__":
    main()
